name: Micultura Backend CI
on:
  push:
    branches: [main, development, development_feature-27]
  pull_request:
    branches: [main, development]
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build
        run: ./gradlew clean build docker -Penv=testing-ci
      - uses: actions/upload-artifact@v2
        with:
          name: build-micultura
          path: build
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker Image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag micultura-testing-ci-app:latest charliezolezzi/micultura-testing-ci-app:latest
          docker push charliezolezzi/micultura-testing-ci-app:latest

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Test Coverage
        run: ./gradlew clean test jacocoTestReport --info
      - name: Check JaCoCo report directory contents
        run: ls -l build/reports/jacoco/test/
      - name: Add coverage to PR
        id: jacoco-madrapps
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 30
          min-coverage-changed-files: 20
      - name: Generate Jacoco Badge
        id: jacoco-cicirellocc
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          generate-branches-badge: true
      - name: Upload Jacoco coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"
      - name: Commit and push
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd .github/badges
          if [[ `git status --porcelain *.svg` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg
            git commit -m "Autogenerated JaCoCo coverage badge" *.svg
            git push
          fi

  test_load:
    needs: [build]
    runs-on: ubuntu-latest
    services:
      app:
        image: charliezolezzi/micultura-testing-ci-app:latest
        ports:
          - 8080:8080
    steps:
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install k6
        run: |
          curl -o k6-v0.47.0-linux-amd64.tar.gz https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz
      - name: Check if file exists
        run: |
          if [ -f "k6-v0.47.0-linux-amd64.tar.gz" ]; then
            echo "El archivo k6-v0.47.0-linux-amd64.tar.gz se ha descargado correctamente."
          else
            echo "El archivo k6-v0.47.0-linux-amd64.tar.gz no se ha descargado o no se encuentra."
          fi
      - name: TAR
        run: |
          tar xvzf k6-v0.47.0-linux-amd64.tar.gz
          chmod +x k6
          sudo mv k6 /usr/local/bin/k6
      - name: Wait for the application to stand up
        run: sleep 20s
      - name: Run k6 load test
        run: |
          cd load-testing
          k6 run load_testing.js
