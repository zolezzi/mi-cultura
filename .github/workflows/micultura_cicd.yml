name: Micultura_CICD

on:
  push:
    branches: [main, development, development_deploy]
  pull_request:
    branches: [main, development]
    types: [opened, synchronize]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Test Coverage
        run: ./gradlew clean test jacocoTestReport --info
      - name: Check JaCoCo report directory contents
        run: ls -l build/reports/jacoco/test/
      - name: Add coverage to PR
        id: jacoco-madrapps
        uses: madrapps/jacoco-report@v1.3
        with:
          paths: build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 30
          min-coverage-changed-files: 20
      - name: Generate Jacoco Badge
        id: jacoco-cicirellocc
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
          generate-branches-badge: true
      - name: Upload Jacoco coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/
      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"
      - name: Commit and push
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd .github/badges
          if [[ `git status --porcelain *.svg` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
            git add *.svg
            git commit -m "Autogenerated JaCoCo coverage badge" *.svg
            git push
          fi
  
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
      - name: Set up working directory
        run: cd frontend/web-app/

      - name: Install Angular CLI and npm v9.6.2
        run: |
          npm install -g @angular/cli@latest
          npm install -g npm@9.6.2

      - name: Install dependencies
        run: |
          cd frontend/web-app
          npm ci

      - name: Build and Test
        run: |
          cd frontend/web-app
          npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: frontend/web-app/dist

  test-frontend:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
      - name: Set up working directory
        run: cd frontend/web-app/
      - name: Install Angular CLI and npm v9.6.2
        run: |
          npm install -g @angular/cli@latest
          npm install -g npm@9.6.2
      - name: Install dependencies
        run: |
          cd frontend/web-app
          npm ci
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: frontend/web-app/dist
      - name: Test
        run: |
          cd frontend/web-app
          npm test

  e2e:
    needs: [build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v18.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.15.0
      - name: Set up working directory
        run: cd frontend/web-app/
      - name: Install Angular CLI and npm v9.6.2
        run: |
          npm install -g @angular/cli@latest
          npm install -g npm@9.6.2
      - name: Install dependencies
        run: |
          cd frontend/web-app
          npm ci
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: frontend/web-app/dist
      - name: E2E tests
        working-directory: frontend/web-app
        run: |
          npm run start-test &
          npx wait-on http://localhost:4200 && npm run test:e2e


  build:
    needs: [test-backend, test-frontend, e2e]
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build
        run: ./gradlew clean build docker -Penv=dev
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker Image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker tag micultura-app:latest charliezolezzi/micultura-app:latest
          docker push charliezolezzi/micultura-app:latest

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Railway CLI
        run: |
          curl -sSL https://railway.app/install.sh | bash
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Deploy to Railway
        if: ${{ github.event_name == 'push' }}
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway link $RAILWAY_PROJECT_ID
          railway up
