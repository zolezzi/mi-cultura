buildscript {
  ext {
        springBootVersion = '2.7.2'
        springDependencyManagementVersion = '1.0.15.RELEASE'
  }
  repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        
        maven 
        {
            url "https://plugins.gradle.org/m2/"
        }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.palantir.git-version" version "0.12.0-rc2"
	id "com.github.node-gradle.node" version "3.0.1"
	id "com.palantir.docker" version "0.22.1"
	id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.git-version'
apply plugin: 'org.springframework.boot'

group = 'unq.edu.li.pdes'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

task buildClient(type:NpmTask, dependsOn:'npmInstall') {
  group = 'build'
  description = "Compile client side folder for production"
  args = ['run','build.prod']
}

if (hasProperty('profile') && ext.profile == 'container')  {

	bootJar {
	    dependsOn "buildClient"
	    baseName="micultura"
	    version="1.0.0"
	    into('BOOT-INF/classes/static') {
		    from "frontend/web-app/dist"
	    }    
	}
}
else {
	bootJar {
	    dependsOn "buildClient"
	    baseName="micultura"
	    version="1.0.0"
	    launchScript();
	    into('BOOT-INF/classes/static') {
		    from "frontend/web-app/dist"
	    }
	}
}

node {
    version = "18.15.0"
	download = true
	nodeModulesDir = file("frontend/web-app")
	nodeProjectDir = file("frontend/web-app")
	npmVersion= "9.6.2"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    println "Docker Result -> micultura-app:latest"
    name "micultura-app:latest"
    tag "MiCultura", "micultura-app:latest"
    dockerfile file("mi-cultura-docker/Dockerfile")
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

jar.dependsOn(buildClient)

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
  	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.2.5'
  	implementation group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.3.9.Final'
  	implementation 'javax.ws.rs:javax.ws.rs-api:2.1'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'ma.glasnost.orika:orika-core:1.5.1'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'
	implementation 'org.apache.commons:commons-lang3:3.0'
    testImplementation "org.testng:testng:6.10", "org.easytesting:fest-assert:1.4"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:5.0.0'
	testCompileOnly 'junit:junit:4.12' 
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
	implementation group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.13.3'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	reports {
        csv.enabled true // Habilitar el reporte CSV
    }
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
				exclude: ['**/utils/**',
					'**/dto/**',
					'**/vo/**',
					'**/security/**',
					'**/configuration/**'
				]
			)
		}))
	}
	dependsOn test
}

test {
	finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}
